<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CloudPics - Your Image Cloud Storage</title>
    <link rel="stylesheet" href="/css/styles.css">
     <!-- Font Awesome for icons  -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>
     <!-- Main Navigation Bar  -->
    <nav class="navbar">
        <div class="nav-container">
             <!-- Left side: Brand logo and name  -->
            <div class="nav-brand">
                <i class="fas fa-cloud"></i>
                <span>CloudPics</span>
                 <!-- Mobile menu toggle button (hidden on desktop)  -->
                <button class="mobile-menu-toggle" onclick="toggleMobileMenu()">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
            
             <!-- Center: Search bar and navigation menu  -->
            <div class="nav-menu" id="navMenu">
                 <!-- Search functionality  -->
                <div class="nav-search">
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" placeholder="Search your images..." class="search-input">
                    </div>
                </div>
            </div>
            
             <!-- Right side: Action buttons and profile  -->
            <div class="nav-actions">
                 <!-- Dark mode toggle button  -->
                <button class="nav-btn" id="darkModeToggle" title="Toggle Dark Mode" onclick="toggleDarkMode()">
                    <i class="fas fa-moon" id="darkModeIcon"></i>
                </button>
                
                 <!-- Help modal trigger button  -->
                <button class="nav-btn" title="Help & Info" onclick="toggleHelpModal()">
                    <i class="fas fa-question-circle"></i>
                </button>
                
                 <!-- Profile dropdown menu  -->
                <div class="profile-dropdown">
                    <button class="profile-btn" onclick="toggleProfileDropdown()">
                        <div class="profile-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                     <!-- Dropdown menu content  -->
                    <div class="dropdown-menu" id="profileDropdown">
                         <!-- User info header  -->
                        <div class="dropdown-header">
                            <div class="dropdown-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div>
                                <div class="dropdown-name">John Doe</div>
                                <div class="dropdown-email">john@example.com</div>
                            </div>
                        </div>
                        <div class="dropdown-divider"></div>
                         <!-- Menu items  -->
                        <a href="#" class="dropdown-item">
                            <i class="fas fa-chart-bar"></i>
                            Storage Usage
                        </a>
                        <a href="#" class="dropdown-item">
                            <i class="fas fa-shield-alt"></i>
                            Privacy & Security
                        </a>
                        <div class="dropdown-divider"></div>
                        <a href="#" class="dropdown-item" onclick="confirmDeleteAccount()">
                            <i class="fas fa-trash-alt"></i>
                            Delete Account
                        </a>
                        <div class="dropdown-divider"></div>
                        <a href="#" class="dropdown-item">
                            <i class="fas fa-sign-out-alt"></i>
                            Sign Out
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </nav>

     <!-- Main Content Area  -->
    <main class="main-content">
         <!-- File Upload Section  -->
        <section class="upload-section">
            <div class="upload-container">
                 <!-- Drag and drop upload area  -->
                <div class="upload-area" id="uploadArea">
                    <div class="upload-content">
                        <div class="upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <h3>Drag & Drop Images Here</h3>
                        <p>or click to browse files</p>
                         <!-- Hidden file input for click-to-upload  -->
                        <input type="file" id="fileInput" multiple accept="image/*" hidden>
                    </div>
                     <!-- Upload animation overlay  -->
                    <div class="upload-overlay" id="uploadOverlay">
                        <div class="upload-animation">
                            <div class="spinner"></div>
                            <p>Uploading...</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>

         <!-- Upload Preview Section (shown when files are selected)  -->
        <section class="preview-section" id="previewSection" style="display: none;">
            <div class="preview-container">
                <div class="preview-header">
                    <h3>Ready to Upload</h3>
                     <!-- Upload confirmation button  -->
                    <button class="upload-btn" onclick="uploadImages()">
                        <i class="fas fa-upload"></i>
                        Upload Images
                    </button>
                </div>
                 <!-- Grid of selected images for preview  -->
                <div class="preview-grid" id="previewGrid">
                     <!-- Preview items will be added here dynamically by JavaScript  -->
                </div>
            </div>
        </section>

         <!-- Image Gallery Section  -->
        <section class="gallery-section">
             <!-- Gallery header with controls  -->
            <div class="gallery-header">
                <div class="gallery-title">
                    <h2>Your Images</h2>
                     <!-- Dynamic image count display  -->
                    <span class="image-count" id="imageCount">0 images</span>
                </div>
                 <!-- Gallery view and sort controls  -->
                <div class="gallery-controls">
                     <!-- Grid/List view toggle buttons  -->
                    <div class="view-toggle">
                        <button class="toggle-btn active" data-view="grid" onclick="toggleView('grid')">
                            <i class="fas fa-th"></i>
                        </button>
                        <button class="toggle-btn" data-view="list" onclick="toggleView('list')">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                     <!-- Sort dropdown  -->
                    <div class="sort-dropdown">
                        <select class="sort-select">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                            <option value="name">Name A-Z</option>
                            <option value="size">File Size</option>
                        </select>
                    </div>
                </div>
            </div>
            
             <!-- Gallery container  -->
            <div class="gallery-container">
                 <!-- Image grid (populated by JavaScript and sample images)  -->
                <div class="gallery-grid" id="galleryGrid">
                     <!-- Sample images for demonstration  -->
                    <div class="gallery-item">
                        <div class="image-container">
                            <img src="vlcsnap-2024-12-12-11h03m39s037.png" alt="Sample Image 1">
                             <!-- Image overlay with action buttons  -->
                            <div class="image-overlay">
                                <button class="overlay-btn" title="Download">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button class="overlay-btn" title="Share">
                                    <i class="fas fa-share"></i>
                                </button>
                                <button class="overlay-btn" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                         <!-- Image information  -->
                        <div class="image-info">
                            <div class="image-name">game screenshot.jpg</div>
                            <div class="image-details">2.4 MB â€¢ 2 days ago</div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

     <!-- Help Modal (overlay)  -->
    <div class="modal-overlay" id="helpModal">
        <div class="modal-content">
             <!-- Modal header  -->
            <div class="modal-header">
                <h3>Help & Information</h3>
                <button class="modal-close" onclick="toggleHelpModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
             <!-- Modal body with help sections  -->
            <div class="modal-body">
                 <!-- Upload instructions  -->
                <div class="help-section">
                    <h4><i class="fas fa-upload"></i> Uploading Images</h4>
                    <p>â€¢ Drag and drop images directly onto the upload area</p>
                    <p>â€¢ Click the upload area to browse and select files</p>
                    <p>â€¢ Supported formats: JPG, PNG, GIF, WebP</p>
                    <p>â€¢ Maximum file size: 10MB per image</p>
                </div>
                
                 <!-- Search and organization help  -->
                <div class="help-section">
                    <h4><i class="fas fa-search"></i> Search & Organization</h4>
                    <p>â€¢ Use the search bar to find images by filename</p>
                    <p>â€¢ Toggle between grid and list view</p>
                    <p>â€¢ Sort images by date, name, or file size</p>
                </div>
                
                 <!-- Keyboard shortcuts  -->
                <div class="help-section">
                    <h4><i class="fas fa-keyboard"></i> Keyboard Shortcuts</h4>
                    <p>â€¢ <kbd>Ctrl + U</kbd> - Focus upload area</p>
                    <p>â€¢ <kbd>Ctrl + F</kbd> - Focus search bar</p>
                    <p>â€¢ <kbd>G</kbd> - Switch to grid view</p>
                    <p>â€¢ <kbd>L</kbd> - Switch to list view</p>
                    <p>â€¢ <kbd>D</kbd> - Toggle dark mode</p>
                </div>
                
                 <!-- Storage information  -->
                <div class="help-section">
                    <h4><i class="fas fa-info-circle"></i> Storage Info</h4>
                    <p>â€¢ Current storage used: <span class="storage-used">2.4 GB</span> / 5 GB</p>
                    <p>â€¢ Total images: <span id="totalImagesCount">3</span></p>
                    <p>â€¢ Account type: Free Plan</p>
                </div>
            </div>
        </div>
    </div>

     <!-- JavaScript file  -->
    <script>

        // Global variables
let selectedFiles = []
let uploadedImages = []
let isDarkMode = false

// DOM elements
const uploadArea = document.getElementById("uploadArea")
const fileInput = document.getElementById("fileInput")
const uploadOverlay = document.getElementById("uploadOverlay")
const previewSection = document.getElementById("previewSection")
const previewGrid = document.getElementById("previewGrid")
const galleryGrid = document.getElementById("galleryGrid")
const imageCount = document.getElementById("imageCount")
const profileDropdown = document.getElementById("profileDropdown")

// Initialize the application
document.addEventListener("DOMContentLoaded", () => {
  initializeEventListeners()
  initializeDarkMode()
  updateImageCount()
  handleResponsiveView() // Check initial view
})

// Initialize all event listeners
function initializeEventListeners() {
  // Upload area events
  uploadArea.addEventListener("click", () => fileInput.click())
  uploadArea.addEventListener("dragover", handleDragOver)
  uploadArea.addEventListener("dragleave", handleDragLeave)
  uploadArea.addEventListener("drop", handleDrop)

  // File input change
  fileInput.addEventListener("change", handleFileSelect)

  // Search functionality
  const searchInput = document.querySelector(".search-input")
  searchInput.addEventListener("input", handleSearch)

  // Sort functionality
  const sortSelect = document.querySelector(".sort-select")
  sortSelect.addEventListener("change", handleSort)

  // Window resize for responsive view
  window.addEventListener("resize", handleResponsiveView)

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    const helpModal = document.getElementById("helpModal")
    if (event.target === helpModal) {
      helpModal.classList.remove("show")
    }

    // Existing dropdown close logic
    if (!event.target.closest(".profile-dropdown")) {
      profileDropdown.classList.remove("show")
    }

    if (!event.target.closest(".nav-menu") && !event.target.closest(".mobile-menu-toggle")) {
      document.getElementById("navMenu").classList.remove("show")
    }
  })
}

// Dark mode toggle
function toggleDarkMode() {
  isDarkMode = !isDarkMode
  const body = document.body
  const darkModeIcon = document.getElementById("darkModeIcon")

  if (isDarkMode) {
    body.setAttribute("data-theme", "dark")
    darkModeIcon.className = "fas fa-sun"
    localStorage.setItem("darkMode", "true")
  } else {
    body.removeAttribute("data-theme")
    darkModeIcon.className = "fas fa-moon"
    localStorage.setItem("darkMode", "false")
  }
}

// Mobile menu toggle
function toggleMobileMenu() {
  const navMenu = document.getElementById("navMenu")
  navMenu.classList.toggle("show")
}

// Confirm delete account
function confirmDeleteAccount() {
  if (
    confirm(
      "Are you sure you want to delete your account? This action cannot be undone and all your images will be permanently deleted.",
    )
  ) {
    // Implement account deletion logic here
    alert("Account deletion functionality would be implemented here.")
    console.log("Deleting account...")
    // You can add API call to delete account
    // deleteAccountFromServer();
  }
}

// Initialize dark mode from localStorage
function initializeDarkMode() {
  const savedDarkMode = localStorage.getItem("darkMode")
  if (savedDarkMode === "true") {
    isDarkMode = true
    document.body.setAttribute("data-theme", "dark")
    document.getElementById("darkModeIcon").className = "fas fa-sun"
  }
}

// Drag and drop handlers
function handleDragOver(e) {
  e.preventDefault()
  uploadArea.classList.add("dragover")
}

function handleDragLeave(e) {
  e.preventDefault()
  uploadArea.classList.remove("dragover")
}

function handleDrop(e) {
  e.preventDefault()
  uploadArea.classList.remove("dragover")

  const files = Array.from(e.dataTransfer.files).filter((file) => file.type.startsWith("image/"))
  if (files.length > 0) {
    showUploadAnimation()
    setTimeout(() => {
      hideUploadAnimation()
      handleFiles(files)
    }, 2000)
  }
}

// File selection handler
function handleFileSelect(e) {
  const files = Array.from(e.target.files)
  if (files.length > 0) {
    handleFiles(files)
  }
}

// Handle selected files
function handleFiles(files) {
  selectedFiles = [...selectedFiles, ...files]
  displayPreview()
  previewSection.style.display = "block"
}

// Display upload preview
function displayPreview() {
  previewGrid.innerHTML = ""

  selectedFiles.forEach((file, index) => {
    const reader = new FileReader()
    reader.onload = (e) => {
      const previewItem = createPreviewItem(e.target.result, file.name, index)
      previewGrid.appendChild(previewItem)
    }
    reader.readAsDataURL(file)
  })
}

// Create preview item
function createPreviewItem(src, name, index) {
  const div = document.createElement("div")
  div.className = "preview-item"
  div.innerHTML = `
        <img src="${src}" alt="${name}">
        <button class="preview-close" onclick="removePreviewItem(${index})">
            <i class="fas fa-times"></i>
        </button>
    `
  return div
}

// Remove preview item
function removePreviewItem(index) {
  selectedFiles.splice(index, 1)
  if (selectedFiles.length === 0) {
    previewSection.style.display = "none"
  } else {
    displayPreview()
  }
}

// Upload images (simulate backend upload)
function uploadImages() {
  if (selectedFiles.length === 0) return

  // Simulate upload process
  const uploadBtn = document.querySelector(".upload-btn")
  const originalText = uploadBtn.innerHTML
  uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...'
  uploadBtn.disabled = true

  // Simulate API call delay
  setTimeout(() => {
    // Add uploaded images to gallery
    selectedFiles.forEach((file) => {
      const reader = new FileReader()
      reader.onload = (e) => {
        const imageData = {
          id: Date.now() + Math.random(),
          src: e.target.result,
          name: file.name,
          size: formatFileSize(file.size),
          uploadDate: new Date(),
          type: file.type,
        }
        uploadedImages.unshift(imageData)
        addImageToGallery(imageData)
      }
      reader.readAsDataURL(file)
    })

    // Reset upload state
    selectedFiles = []
    previewSection.style.display = "none"
    uploadBtn.innerHTML = originalText
    uploadBtn.disabled = false
    updateImageCount()

    // Show success message (you can implement a toast notification here)
    console.log("Images uploaded successfully!")
  }, 2000)
}

// Add image to gallery
function addImageToGallery(imageData) {
  const galleryItem = createGalleryItem(imageData)
  galleryGrid.insertBefore(galleryItem, galleryGrid.firstChild)
}

// Create gallery item
function createGalleryItem(imageData) {
  const div = document.createElement("div")
  div.className = "gallery-item"
  div.innerHTML = `
        <div class="image-container">
            <img src="${imageData.src}" alt="${imageData.name}">
            <div class="image-overlay">
                <button class="overlay-btn" title="Download" onclick="downloadImage('${imageData.id}')">
                    <i class="fas fa-download"></i>
                </button>
                <button class="overlay-btn" title="Share" onclick="shareImage('${imageData.id}')">
                    <i class="fas fa-share"></i>
                </button>
                <button class="overlay-btn" title="Delete" onclick="deleteImage('${imageData.id}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        <div class="image-info">
            <div class="image-name">${imageData.name}</div>
            <div class="image-details">${imageData.size} â€¢ ${getTimeAgo(imageData.uploadDate)}</div>
        </div>
    `
  return div
}

// Show upload animation
function showUploadAnimation() {
  uploadOverlay.classList.add("show")
}

// Hide upload animation
function hideUploadAnimation() {
  uploadOverlay.classList.remove("show")
}

// Toggle profile dropdown
function toggleProfileDropdown() {
  profileDropdown.classList.toggle("show")
}

// Toggle view (grid/list)
function toggleView(view) {
  const isMobile = window.innerWidth <= 768

  // Prevent list view on mobile
  if (isMobile && view === "list") {
    return
  }

  const toggleBtns = document.querySelectorAll(".toggle-btn")
  toggleBtns.forEach((btn) => btn.classList.remove("active"))
  document.querySelector(`[data-view="${view}"]`).classList.add("active")

  if (view === "list") {
    galleryGrid.classList.add("list-view")
  } else {
    galleryGrid.classList.remove("list-view")
  }
}

// Search functionality
function handleSearch(e) {
  const searchTerm = e.target.value.toLowerCase()
  const galleryItems = document.querySelectorAll(".gallery-item")

  galleryItems.forEach((item) => {
    const imageName = item.querySelector(".image-name").textContent.toLowerCase()
    if (imageName.includes(searchTerm)) {
      item.style.display = "block"
    } else {
      item.style.display = "none"
    }
  })
}

// Sort functionality
function handleSort(e) {
  const sortBy = e.target.value
  const galleryItems = Array.from(document.querySelectorAll(".gallery-item"))

  galleryItems.sort((a, b) => {
    const nameA = a.querySelector(".image-name").textContent
    const nameB = b.querySelector(".image-name").textContent

    switch (sortBy) {
      case "name":
        return nameA.localeCompare(nameB)
      case "oldest":
        // For demo purposes, reverse the current order
        return -1
      case "newest":
      default:
        return 1
    }
  })

  // Re-append sorted items
  galleryItems.forEach((item) => galleryGrid.appendChild(item))
}

// Image actions
function downloadImage(imageId) {
  const image = uploadedImages.find((img) => img.id == imageId)
  if (image) {
    const link = document.createElement("a")
    link.href = image.src
    link.download = image.name
    link.click()
  }
}

function shareImage(imageId) {
  // Implement share functionality
  console.log("Sharing image:", imageId)
  // You can integrate with Web Share API or show a share modal
}

function deleteImage(imageId) {
  if (confirm("Are you sure you want to delete this image?")) {
    // Remove from uploadedImages array
    uploadedImages = uploadedImages.filter((img) => img.id != imageId)

    // Remove from DOM
    const galleryItems = document.querySelectorAll(".gallery-item")
    galleryItems.forEach((item) => {
      const deleteBtn = item.querySelector('[onclick*="' + imageId + '"]')
      if (deleteBtn && deleteBtn.getAttribute("onclick").includes("deleteImage")) {
        item.remove()
      }
    })

    updateImageCount()
  }
}

// Utility functions
function formatFileSize(bytes) {
  if (bytes === 0) return "0 Bytes"
  const k = 1024
  const sizes = ["Bytes", "KB", "MB", "GB"]
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
}

function getTimeAgo(date) {
  const now = new Date()
  const diffTime = Math.abs(now - date)
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))

  if (diffDays === 1) return "1 day ago"
  if (diffDays < 7) return `${diffDays} days ago`
  if (diffDays < 30) return `${Math.ceil(diffDays / 7)} week${Math.ceil(diffDays / 7) > 1 ? "s" : ""} ago`
  return `${Math.ceil(diffDays / 30)} month${Math.ceil(diffDays / 30) > 1 ? "s" : ""} ago`
}

// Help modal toggle
function toggleHelpModal() {
  const helpModal = document.getElementById("helpModal")
  helpModal.classList.toggle("show")
}

// Add keyboard shortcuts functionality
document.addEventListener("keydown", (e) => {
  // Only trigger shortcuts when not typing in input fields
  if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA") {
    return
  }

  switch (e.key.toLowerCase()) {
    case "d":
      if (!e.ctrlKey && !e.metaKey) {
        toggleDarkMode()
      }
      break
    case "g":
      if (!e.ctrlKey && !e.metaKey) {
        toggleView("grid")
      }
      break
    case "l":
      if (!e.ctrlKey && !e.metaKey) {
        toggleView("list")
      }
      break
    case "f":
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault()
        document.querySelector(".search-input").focus()
      }
      break
    case "u":
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault()
        uploadArea.click()
      }
      break
    case "escape":
      // Close modals and dropdowns
      document.getElementById("helpModal").classList.remove("show")
      document.getElementById("profileDropdown").classList.remove("show")
      document.getElementById("navMenu").classList.remove("show")
      break
  }
})

// Update the total images count in help modal
function updateImageCount() {
  const totalImages = document.querySelectorAll(".gallery-item").length
  imageCount.textContent = `${totalImages} image${totalImages !== 1 ? "s" : ""}`

  // Update help modal count
  const helpModalCount = document.getElementById("totalImagesCount")
  if (helpModalCount) {
    helpModalCount.textContent = totalImages
  }
}

// Backend integration helpers (for when you implement the backend)
async function uploadToServer(files) {
  const formData = new FormData()
  files.forEach((file) => {
    formData.append("images", file)
  })

  try {
    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    })

    if (response.ok) {
      const result = await response.json()
      return result
    } else {
      throw new Error("Upload failed")
    }
  } catch (error) {
    console.error("Upload error:", error)
    throw error
  }
}

async function fetchImagesFromServer() {
  try {
    const response = await fetch("/api/images")
    if (response.ok) {
      const images = await response.json()
      return images
    } else {
      throw new Error("Failed to fetch images")
    }
  } catch (error) {
    console.error("Fetch error:", error)
    return []
  }
}

async function deleteImageFromServer(imageId) {
  try {
    const response = await fetch(`/api/images/${imageId}`, {
      method: "DELETE",
    })

    if (response.ok) {
      return true
    } else {
      throw new Error("Delete failed")
    }
  } catch (error) {
    console.error("Delete error:", error)
    return false
  }
}

async function deleteAccountFromServer() {
  try {
    const response = await fetch("/api/account", {
      method: "DELETE",
    })

    if (response.ok) {
      // Redirect to login page or show success message
      window.location.href = "/login"
      return true
    } else {
      throw new Error("Account deletion failed")
    }
  } catch (error) {
    console.error("Account deletion error:", error)
    return false
  }
}

// Handle responsive view changes
function handleResponsiveView() {
  const isMobile = window.innerWidth <= 768
  const galleryGrid = document.getElementById("galleryGrid")
  const toggleBtns = document.querySelectorAll(".toggle-btn")

  if (isMobile) {
    // Force grid view on mobile for better UX
    galleryGrid.classList.remove("list-view")
    toggleBtns.forEach((btn) => btn.classList.remove("active"))
    document.querySelector('[data-view="grid"]').classList.add("active")
  }
}


    </script>
</body>
</html>
